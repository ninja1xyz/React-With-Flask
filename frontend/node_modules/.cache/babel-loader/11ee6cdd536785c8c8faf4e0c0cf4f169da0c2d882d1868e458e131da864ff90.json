{"ast":null,"code":"var _jsxFileName = \"/home/hassan/python task/frontend/src/components/TruncatedText.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TruncatedText = ({\n  text,\n  maxLength\n}) => {\n  _s();\n  const [isExpanded, setIsExpanded] = useState(false);\n  const truncatedText = isExpanded && text ? text : `${text.slice(0, maxLength)}...`;\n  const toggleExpansion = () => {\n    setIsExpanded(!isExpanded);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [!isExpanded && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: truncatedText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleExpansion,\n        children: \"Click me to read more\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }, this), isExpanded && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"originalText mt-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Orignal Text:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 14\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"popup \",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"popup-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"close\",\n            onClick: toggleExpansion,\n            children: \"\\xD7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 26,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }, this);\n};\n_s(TruncatedText, \"FPNvbbHVlWWR4LKxxNntSxiIS38=\");\n_c = TruncatedText;\nexport default TruncatedText;\nvar _c;\n$RefreshReg$(_c, \"TruncatedText\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","TruncatedText","text","maxLength","_s","isExpanded","setIsExpanded","truncatedText","slice","toggleExpansion","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","className","_c","$RefreshReg$"],"sources":["/home/hassan/python task/frontend/src/components/TruncatedText.js"],"sourcesContent":["import React, { useState } from 'react';\n\nconst TruncatedText = ({ text, maxLength }) => {\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  const truncatedText = (isExpanded && text)? text : `${text.slice(0, maxLength)}...`;\n\n  const toggleExpansion = () => {\n    setIsExpanded(!isExpanded);\n  };\n\n  return (\n    <div>\n      {!isExpanded && (\n        <div>\n            <p>{truncatedText}</p>\n            <button onClick={toggleExpansion}>Click me to read more</button>\n        </div>\n      )}\n\n      {isExpanded && (\n        <div className='originalText mt-3'>\n             <h2>Orignal Text:</h2>\n            <div className=\"popup \">\n            <div className=\"popup-content\">\n                <span className=\"close\" onClick={toggleExpansion}>\n                &times;\n                </span>\n                <p>{text}</p>\n            </div>\n            </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TruncatedText;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,aAAa,GAAGA,CAAC;EAAEC,IAAI;EAAEC;AAAU,CAAC,KAAK;EAAAC,EAAA;EAC7C,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EAEnD,MAAMS,aAAa,GAAIF,UAAU,IAAIH,IAAI,GAAGA,IAAI,GAAI,GAAEA,IAAI,CAACM,KAAK,CAAC,CAAC,EAAEL,SAAS,CAAE,KAAI;EAEnF,MAAMM,eAAe,GAAGA,CAAA,KAAM;IAC5BH,aAAa,CAAC,CAACD,UAAU,CAAC;EAC5B,CAAC;EAED,oBACEL,OAAA;IAAAU,QAAA,GACG,CAACL,UAAU,iBACVL,OAAA;MAAAU,QAAA,gBACIV,OAAA;QAAAU,QAAA,EAAIH;MAAa;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACtBd,OAAA;QAAQe,OAAO,EAAEN,eAAgB;QAAAC,QAAA,EAAC;MAAqB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/D,CACN,EAEAT,UAAU,iBACTL,OAAA;MAAKgB,SAAS,EAAC,mBAAmB;MAAAN,QAAA,gBAC7BV,OAAA;QAAAU,QAAA,EAAI;MAAa;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACvBd,OAAA;QAAKgB,SAAS,EAAC,QAAQ;QAAAN,QAAA,eACvBV,OAAA;UAAKgB,SAAS,EAAC,eAAe;UAAAN,QAAA,gBAC1BV,OAAA;YAAMgB,SAAS,EAAC,OAAO;YAACD,OAAO,EAAEN,eAAgB;YAAAC,QAAA,EAAC;UAElD;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC,eACPd,OAAA;YAAAU,QAAA,EAAIR;UAAI;YAAAS,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACZ;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACV,EAAA,CAjCIH,aAAa;AAAAgB,EAAA,GAAbhB,aAAa;AAmCnB,eAAeA,aAAa;AAAC,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}